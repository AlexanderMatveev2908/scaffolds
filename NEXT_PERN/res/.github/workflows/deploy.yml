name: check üß™ and merge

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: cpy code in git env
        uses: actions/checkout@v4

      - name: setup stable latest node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: enable corepack
        run: |
          corepack enable
          corepack prepare yarn@4.9.2 --activate

      - name: install dependencies
        run: yarn install

      - name: build shared packages
        run: yarn turbo build --filter @shared/first

      - name: check client server and all packages with lint or tsc
        run: yarn check

  automerge:
    if: ${{ github.event_name == 'pull_request' && success() }}
    needs: check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed("‚ùå No pull request context available.");
              return;
            }

            const mergeResult = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method: "merge"
            });

            if (!mergeResult.data.merged) {
              core.setFailed("‚ùå Merge failed.");
              return;
            }

            await github.rest.git.deleteRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${pr.head.ref}`
            });

            console.log(`‚úÖ PR #${pr.number} merged & branch deleted.`);

  deploy_on_push:
    name: deploy on push both client and server on Fly.io
    needs: [check]
    if: github.event_name == 'push' && needs.check.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: deploy server
        run: flyctl deploy --remote-only --config fly.server.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_SERVER }}

      - name: deploy client
        run: |
          flyctl deploy \
            --remote-only \
            --config fly.client.toml \
            --build-arg NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }} \
            --build-arg NEXT_PUBLIC_BACK_URL=${{ secrets.NEXT_PUBLIC_BACK_URL }} \
            --build-arg NEXT_PUBLIC_FRONT_URL=${{ secrets.NEXT_PUBLIC_FRONT_URL }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_CLIENT }}

  deploy_on_pr_merge:
    name: deploy both client and server on Fly.io
    needs: [check, automerge]
    if: github.event_name == 'pull_request' && needs.automerge.result == 'success'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: deploy server
        run: flyctl deploy --remote-only --config fly.server.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_SERVER }}

      - name: deploy client
        run: |
          flyctl deploy \
            --remote-only \
            --config fly.client.toml \
            --build-arg NEXT_PUBLIC_ENV=${{ secrets.NEXT_PUBLIC_ENV }} \
            --build-arg NEXT_PUBLIC_BACK_URL=${{ secrets.NEXT_PUBLIC_BACK_URL }} \
                        --build-arg NEXT_PUBLIC_FRONT_URL=${{ secrets.NEXT_PUBLIC_FRONT_URL }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_DEPLOY_CLIENT }}
